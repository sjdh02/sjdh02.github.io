<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on 0x738</title>
    <link>https://sjdh.us/tags/rust/</link>
    <description>Recent content in rust on 0x738</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Apr 2019 19:54:41 -0500</lastBuildDate>
    
	<atom:link href="https://sjdh.us/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing Recursively Defined Types in Rust</title>
      <link>https://sjdh.us/posts/compiler-recursive-types/</link>
      <pubDate>Mon, 22 Apr 2019 19:54:41 -0500</pubDate>
      
      <guid>https://sjdh.us/posts/compiler-recursive-types/</guid>
      <description>Parsing is the step in the compilation of a program where individual tokens are grouped into expressions, which can then be further analyzed before being translated into machine code. In order to do this, sets of tokens must be identifiable as singular expressions, so that they may be grouped up to form meaning. My language is quite free-form when it comes to what expressions are allowed where (as are many), and representing this kind of freedom in a compiler&amp;rsquo;s source code is best done with recursive types.</description>
    </item>
    
  </channel>
</rss>